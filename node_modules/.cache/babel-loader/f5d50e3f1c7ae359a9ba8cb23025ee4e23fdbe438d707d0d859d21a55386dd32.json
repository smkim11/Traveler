{"ast":null,"code":"var _jsxFileName = \"/Users/hiciz/Downloads/k_project-main/src/pages/Flight.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { useLocation } from \"react-router-dom\";\nimport Navbar from \"../components/Navbar\";\nimport ChatBot from \"../components/ChatBot\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Flight = () => {\n  _s();\n  const location = useLocation();\n\n  // 기본값 설정 (location.state가 null인 경우)\n  const {\n    originLocationCode = \"\",\n    destinationLocationCode = \"\",\n    departureDate = \"\",\n    returnDate = \"\",\n    adults = 1\n  } = location.state || {};\n  const [flights, setFlights] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const fetchFlights = async () => {\n      if (!departureDate) {\n        setError(\"출발 날짜는 필수입니다.\");\n        setLoading(false);\n        return;\n      }\n      setLoading(true);\n      try {\n        const body = {\n          originLocationCode,\n          destinationLocationCode,\n          departureDate,\n          returnDate: returnDate || null,\n          adults\n        };\n        console.log(\"Request Body:\", body);\n        const response = await fetch(\"http://localhost:8000/flights\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify(body)\n        });\n        const data = await response.json();\n        if (response.ok) {\n          if (data.flight_data.length === 0) {\n            setError(\"해당 조건에 맞는 항공편을 찾을 수 없습니다.\");\n          } else {\n            setFlights(data.flight_data.slice(0, 10) || []);\n          }\n        } else {\n          setError(data.detail || \"항공편을 불러오는 중 오류가 발생했습니다.\");\n        }\n      } catch (err) {\n        setError(\"항공편을 불러오는 중 오류가 발생했습니다.\");\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchFlights();\n  }, [originLocationCode, destinationLocationCode, departureDate, returnDate, adults]);\n  const renderChatBot = () => {\n    console.log(\"Flight data passed to ChatBot:\", flights); // 추가된 로그\n    if (loading) {\n      return /*#__PURE__*/_jsxDEV(ChatBot, {\n        chatPrompt: \"\\uD56D\\uACF5\\uD3B8 \\uC815\\uBCF4\\uB97C \\uBD88\\uB7EC\\uC624\\uACE0 \\uC788\\uC2B5\\uB2C8\\uB2E4...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 20\n      }, this);\n    } else if (error) {\n      return /*#__PURE__*/_jsxDEV(ChatBot, {\n        chatPrompt: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 20\n      }, this);\n    } else if (flights.length > 0) {\n      return /*#__PURE__*/_jsxDEV(ChatBot, {\n        chatPrompt: \"\\uD56D\\uACF5\\uD3B8 \\uC815\\uBCF4\\uB97C \\uD655\\uC778\\uD560 \\uC218 \\uC788\\uC2B5\\uB2C8\\uB2E4.\",\n        flightData: flights\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 17\n      }, this);\n    } else {\n      return /*#__PURE__*/_jsxDEV(ChatBot, {\n        chatPrompt: \"\\uD56D\\uACF5\\uD3B8\\uC744 \\uCC3E\\uC744 \\uC218 \\uC5C6\\uC2B5\\uB2C8\\uB2E4.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 20\n      }, this);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: renderChatBot()\n  }, void 0, false);\n};\n_s(Flight, \"uH08P2wqi7xEpW/YrKbqxzWhQos=\", false, function () {\n  return [useLocation];\n});\n_c = Flight;\nexport default Flight;\nvar _c;\n$RefreshReg$(_c, \"Flight\");","map":{"version":3,"names":["React","useState","useEffect","useLocation","Navbar","ChatBot","jsxDEV","_jsxDEV","Fragment","_Fragment","Flight","_s","location","originLocationCode","destinationLocationCode","departureDate","returnDate","adults","state","flights","setFlights","loading","setLoading","error","setError","fetchFlights","body","console","log","response","fetch","method","headers","JSON","stringify","data","json","ok","flight_data","length","slice","detail","err","renderChatBot","chatPrompt","fileName","_jsxFileName","lineNumber","columnNumber","flightData","children","_c","$RefreshReg$"],"sources":["/Users/hiciz/Downloads/k_project-main/src/pages/Flight.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { useLocation } from \"react-router-dom\";\r\nimport Navbar from \"../components/Navbar\";\r\nimport ChatBot from \"../components/ChatBot\";\r\n\r\nconst Flight = () => {\r\n    const location = useLocation();\r\n    \r\n    // 기본값 설정 (location.state가 null인 경우)\r\n    const {\r\n        originLocationCode = \"\",\r\n        destinationLocationCode = \"\",\r\n        departureDate = \"\",\r\n        returnDate = \"\",\r\n        adults = 1,\r\n    } = location.state || {};\r\n\r\n    const [flights, setFlights] = useState([]);\r\n    const [loading, setLoading] = useState(true);\r\n    const [error, setError] = useState(null);\r\n\r\n    useEffect(() => {\r\n        const fetchFlights = async () => {\r\n            if (!departureDate) {\r\n                setError(\"출발 날짜는 필수입니다.\");\r\n                setLoading(false);\r\n                return;\r\n            }\r\n\r\n            setLoading(true);\r\n            try {\r\n                const body = {\r\n                    originLocationCode,\r\n                    destinationLocationCode,\r\n                    departureDate,\r\n                    returnDate: returnDate || null,\r\n                    adults,\r\n                };\r\n\r\n                console.log(\"Request Body:\", body);\r\n                const response = await fetch(\"http://localhost:8000/flights\", {\r\n                    method: \"POST\",\r\n                    headers: {\r\n                        \"Content-Type\": \"application/json\",\r\n                    },\r\n                    body: JSON.stringify(body),\r\n                });\r\n\r\n                const data = await response.json();\r\n                if (response.ok) {\r\n                    if (data.flight_data.length === 0) {\r\n                        setError(\"해당 조건에 맞는 항공편을 찾을 수 없습니다.\");\r\n                    } else {\r\n                        setFlights(data.flight_data.slice(0, 10) || []);\r\n                    }\r\n                } else {\r\n                    setError(data.detail || \"항공편을 불러오는 중 오류가 발생했습니다.\");\r\n                }\r\n            } catch (err) {\r\n                setError(\"항공편을 불러오는 중 오류가 발생했습니다.\");\r\n            } finally {\r\n                setLoading(false);\r\n            }\r\n        };\r\n\r\n        fetchFlights();\r\n    }, [originLocationCode, destinationLocationCode, departureDate, returnDate, adults]);\r\n\r\n    const renderChatBot = () => {\r\n        console.log(\"Flight data passed to ChatBot:\", flights); // 추가된 로그\r\n        if (loading) {\r\n            return <ChatBot chatPrompt=\"항공편 정보를 불러오고 있습니다...\" />;\r\n        } else if (error) {\r\n            return <ChatBot chatPrompt={error} />;\r\n        } else if (flights.length > 0) {\r\n            return (\r\n                <ChatBot chatPrompt=\"항공편 정보를 확인할 수 있습니다.\" flightData={flights} />\r\n            );\r\n        } else {\r\n            return <ChatBot chatPrompt=\"항공편을 찾을 수 없습니다.\" />;\r\n        }\r\n    };\r\n\r\n    return (\r\n        <>\r\n            \r\n            {renderChatBot()}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Flight;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}